import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class BankingAccount {

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{
	  
	//The input for the map is <Text, IntWritable> pair
    private Text city = new Text();
    private IntWritable balance = new IntWritable();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      //we cut the input in tokens and keep the city and the balance
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        itr.nextToken();
        city.set(itr.nextToken());
        itr.nextToken();
        balance.set(Integer.parseInt(itr.nextToken()));
        itr.nextToken();
        //we write the pair <city, balance>
        context.write(city, balance);
      }
    }
  }
  
  //the output from the reducer is also <Text, IntWritable>
  public static class IntSumReducer
       extends Reducer<Text,IntWritable,Text,IntWritable> {
    private IntWritable balance_amount = new IntWritable();

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      //sum is the amount of all bank accounts for each city 
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      balance_amount.set(sum);
      context.write(key, balance_amount);
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "friends mean");
    job.setJarByClass(BankingAccount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
